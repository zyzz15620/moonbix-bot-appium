plugins {
    id 'java'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation platform('org.junit:junit-bom:5.10.0')
    implementation 'org.junit.jupiter:junit-jupiter'
    implementation 'io.appium:java-client:9.3.0'
    implementation 'org.seleniumhq.selenium:selenium-java:4.25.0'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
}

test {
    useJUnitPlatform()
}

def loadEnv(String filePath) {
    def env = [:]
    def envFile = file(filePath)

    if (envFile.exists()) {
        envFile.eachLine { line ->
            def parts = line.split("=")
            if (parts.size() == 2) {
                env[parts[0].trim()] = parts[1].trim()
            }
        }
    } else {
        println "local.env file not found at $filePath"
    }
    return env
}

// Task to start the emulator
tasks.register('startEmulator', Exec) {
    doFirst {
        println 'Starting Emulator...'

        def osName = System.getProperty('os.name').toLowerCase()

        // Load environment variables using Dotenv
        def envVars = loadEnv("local.env")

        // Load AVD name from .env file or default to 'API33Pixel4'
        def avdName = envVars['emulator_avd'] ?: 'API33'

        if (osName.contains('windows')) {
            def emulatorPath = "C:/android_sdk/emulator/emulator.exe"
            println "Running: ${emulatorPath} -avd ${avdName}"
            commandLine 'cmd', '/c', "${emulatorPath} -avd ${avdName}"
        } else {
            commandLine 'sh', '-c', "emulator -avd ${avdName}"
        }
    }
}

// Task to start Appium
tasks.register('startAppium', Exec) {
    doFirst {
        println 'Starting Appium in a new terminal window...'

        def osName = System.getProperty('os.name').toLowerCase()
        if (osName.contains('mac')) {
            // Open a new terminal window and keep it open while running Appium
            commandLine 'osascript', '-e', '''
                tell application "Terminal"
                    do script "appium"
                    activate
                end tell
            '''
        } else if (osName.contains('windows')) {
            commandLine 'cmd', '/c', 'appium > logs\\appium.log 2>&1'
        } else {
            commandLine 'sh', '-c', 'appium > logs/appium.log 2>&1 &'
        }
    }
}



// Task to run the automation script (run manually)
tasks.register('runAutomationScript', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'MoonbixTest'

    doFirst {
        println 'Running automation script...'
        println 'Waiting for emulator to boot...'

        def osName = System.getProperty('os.name').toLowerCase()
        if (osName.contains('windows')) {
            exec {
                commandLine 'cmd', '/c', 'adb wait-for-device'
            }
        } else {
            exec {
                commandLine 'sh', '-c', 'adb wait-for-device'
            }
        }
    }
}
